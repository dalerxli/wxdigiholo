#!/usr/bin/env python
# -*- coding: utf-8 -*-
# generated by wxGlade 0.6.3 on Mon Aug 23 21:26:50 2010

import wx

# begin wxGlade: extracode
# end wxGlade

from select_region_widget import Select
import ImageDraw, Image
from scipy.misc import fromimage, toimage

from pylab import *

def pilToImage(pil):
	image = wx.EmptyImage(pil.size[0], pil.size[1])
	image.SetData(pil.convert('RGB').tostring())
	return image

def imageToBitmap(image):
	return image.ConvertToBitmap()

def pilToBitmap(pil):
	return imageToBitmap(pilToImage(pil))
### funciones tomadas de http://wiki.wxpython.org/index.cgi/WorkingWithImages




class MyFrame(wx.Dialog):
		
	def __init__(self, image_ndarray):
		style = wx.CAPTION|wx.CLOSE_BOX|wx.MINIMIZE_BOX|wx.MAXIMIZE_BOX|wx.SYSTEM_MENU|wx.CLIP_CHILDREN
		wx.Dialog.__init__(self, None, -1, "Selecciona la Región de Interés (ROI)", style=style)	
		

		self.image_ndarray=image_ndarray
		
		self.button_1 = wx.Button(self, -1, "+")
		self.panel_1 = wx.Panel(self, -1)
		self.button_2 = wx.Button(self, -1, "Rectangulo")
		self.button_3 = wx.Button(self, -1, "Elipse")
		self.button_4 = wx.Button(self, -1, "Manual")
		self.panel_2 = wx.Panel(self, -1)
		self.button_5 = wx.Button(self, -1, "Cancelar")
		self.button_6 = wx.Button(self, -1, "Aceptar")
		self.panel_4 = wx.Panel(self, -1)
		self.panel_5 = wx.Panel(self, -1)
		self.bitmap_1 = wx.StaticBitmap(self, -1, wx.NullBitmap, style=wx.SIMPLE_BORDER)


		self.newx=640
		self.newy=480
		self.extra_init()

		self.__set_properties()
		self.__do_layout()

		##self.Bind(wx.EVT_BUTTON, self.add_mask, self.button_1)
		self.Bind(wx.EVT_BUTTON, self.rect_select, self.button_2)
		self.Bind(wx.EVT_BUTTON, self.ellipse_select, self.button_3)
		self.Bind(wx.EVT_BUTTON, self.manual_select, self.button_4)
		self.Bind(wx.EVT_BUTTON, self.cancel, self.button_5)
		self.Bind(wx.EVT_BUTTON, self.enter, self.button_6)
		# end wxGlade


		self.Bind(wx.EVT_CLOSE, self.OnCloseWindow)


	def OnCloseWindow(self, event):
		out=wx.ID_CANCEL
		self.EndModal(out)


	def extra_init(self): ### created by Oscar Rincon

		image_pil=toimage(self.image_ndarray)

		x=self.image_ndarray.shape[1]
		y=self.image_ndarray.shape[0]

		print x,y


		### Tamano de la ventana en pantalla
		XLIM=900
		YLIM=XLIM/1.33333333

		if x>XLIM:
			newx=XLIM
			newy=y*newx/x
			convert=newx/x
			if newy>YLIM:
				newy2=YLIM
				newx2=newx*newy2/newy
			newx=newx2
			newy=newy2			
			convert=newy/y	
		
		else: 
			newx=x		
			newy=y
			convert=1.

	
		self.newx=int(newx)
		self.newy=int(newy)
	
		self.convert=convert

		self.X=x
		self.Y=y

		image_pil = image_pil.resize( (self.newx, self.newy), Image.NEAREST) 
	
		image_Bitmap = pilToBitmap(image_pil)
	
		self.bitmap_1 = Select( self, -1, image_Bitmap, size=(self.newx,self.newy) )
		
		
		

	def __set_properties(self):
		# begin wxGlade: MyFrame.__set_properties
		self.SetTitle("Selecciona la Región de Interés (ROI)")
		self.button_1.Enable(False)
		self.button_2.Enable(False)
		self.button_3.Enable(False)
		self.button_4.Enable(True)
		self.button_5.Enable(False)
		self.button_6.Enable(False)
		self.bitmap_1.SetMinSize((self.newx, self.newy))
		# end wxGlade

	def __do_layout(self):
		# begin wxGlade: MyFrame.__do_layout
		sizer_1 = wx.BoxSizer(wx.VERTICAL)
		grid_sizer_1 = wx.FlexGridSizer(1, 2, 0, 0)
		grid_sizer_2 = wx.FlexGridSizer(10, 1, 0, 0)
		grid_sizer_2.Add(self.button_1, 0, 0, 0)
		grid_sizer_2.Add(self.panel_1, 1, wx.EXPAND, 0)
		grid_sizer_2.Add(self.button_2, 0, 0, 0)
		grid_sizer_2.Add(self.button_3, 0, 0, 0)
		grid_sizer_2.Add(self.button_4, 0, 0, 0)
		grid_sizer_2.Add(self.panel_2, 1, wx.EXPAND, 0)
		grid_sizer_2.Add(self.button_5, 0, 0, 0)
		grid_sizer_2.Add(self.button_6, 0, 0, 0)
		grid_sizer_2.Add(self.panel_4, 1, wx.EXPAND, 0)
		grid_sizer_2.Add(self.panel_5, 1, wx.EXPAND, 0)
		grid_sizer_1.Add(grid_sizer_2, 1, wx.EXPAND, 0)
		grid_sizer_1.Add(self.bitmap_1, 0, wx.EXPAND|wx.SHAPED, 0)
		sizer_1.Add(grid_sizer_1, 1, wx.EXPAND, 0)
		self.SetSizer(sizer_1)
		sizer_1.Fit(self)
		self.Layout()
		# end wxGlade

#	def add_mask(self, event): # wxGlade: MyFrame.<event_handler>
		#self.button_2.Enable()
		#self.button_3.Enable()
#		self.button_4.Enable()
#		self.bitmap_1.add_points()
#		event.Skip()

	def rect_select(self, event): # wxGlade: MyFraself.flag_DCLICK=Falseme.<event_handler>
		#~ self.button_5.Enable()
		#~ self.button_6.Enable()
		#~ self.bitmap_1.flag_select='rect'
		event.Skip()


	def ellipse_select(self, event): # wxGlade: MyFrame.<event_handler>
		#~ self.button_5.Enable()
		#~ self.button_6.Enable()
		event.Skip()


	def manual_select(self, event): # wxGlade: MyFrame.<event_handler>
		self.button_5.Enable()
		self.button_6.Enable()
		self.bitmap_1.flag_select='manual'
		event.Skip()

	def cancel(self, event): # wxGlade: MyFrame.<event_handler>
		self.button_6.Disable()
		self.bitmap_1.cancel()	
		self.bitmap_1.flag_select=None	
		self.bitmap_1.flag_DoubleClick=False
			
		event.Skip()


	def enter(self, event): # wxGlade: MyFrame.<event_handler>
		self.button_5.Enable()
		self.button_6.Enable()
		
		
		if not self.bitmap_1.flag_DoubleClick:	
			self.bitmap_1.if_flag_DoubleClick_is_False()

					
		self.LIST = self.bitmap_1.all_list
		

		self.get_mask()
		#print self.LIST
		
		out=wx.ID_OK
		self.EndModal(out)

		#event.Skip()
		
		
		
	def get_mask(self):


		im=Image.new("L", (self.X,self.Y))
		draw = ImageDraw.Draw(im)
		
		
	
		for verts in self.LIST:
			v=[ ( float(v.Get()[0])/self.convert, float(v.Get()[1])/self.convert ) for v in verts]	
			draw.polygon(v, fill="white", outline="white") 

		del draw 
		#im=fromimage(im)
 
		#imshow(im)
		self.mask = fromimage(im)



	

# end of class MyFrame


class MyApp(wx.App):
	def OnInit(self):
		wx.InitAllImageHandlers()

		image_ndarray=zeros((480,640))

		frame_1 = MyFrame(image_ndarray)
		if frame_1.ShowModal()==wx.ID_OK:
			print frame_1.LIST

		frame_1.Destroy()



		self.SetTopWindow(frame_1)

		return 1

# end of class MyApp

if __name__ == "__main__":
	app = MyApp(0)
	app.MainLoop()
