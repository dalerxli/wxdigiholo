#!/usr/bin/env python
# -*- coding: utf-8 -*-
# generated by wxGlade 0.6.3 on Tue Sep  7 10:00:00 2010

import wx

# begin wxGlade: extracode
from floatcombo import *
# end wxGlade


class MyDialog(wx.Dialog):
	def __init__(self, *args, **kwds):
		# begin wxGlade: MyDialog.__init__
		kwds["style"] = wx.DEFAULT_DIALOG_STYLE
		wx.Dialog.__init__(self, *args, **kwds)
		self.panel_1 = wx.ScrolledWindow(self, -1, style=wx.SIMPLE_BORDER|wx.TAB_TRAVERSAL|wx.FULL_REPAINT_ON_RESIZE)
		self.bitmap_1 = wx.StaticBitmap(self.panel_1, -1, wx.NullBitmap, style=wx.SIMPLE_BORDER)
		self.panel_14 = wx.Panel(self, -1)
		self.panel_15 = wx.Panel(self, -1)
		self.panel_16 = wx.Panel(self, -1)
		self.panel_17 = wx.Panel(self, -1)
		self.button_6 = wx.Button(self, -1, "Disminuir")
		self.button_7 = wx.Button(self, -1, "Aumentar")
		self.window_1 = FloatCombo(self, -1)
		self.label_1 = wx.StaticText(self, -1, "Intervalo", style=wx.ALIGN_CENTRE)
		self.text_ctrl_1 = wx.TextCtrl(self, -1, "10000", style=wx.TE_PROCESS_ENTER)
		self.label_8 = wx.StaticText(self, -1, "um", style=wx.ALIGN_CENTRE)
		self.label_2 = wx.StaticText(self, -1, "No. Pasos", style=wx.ALIGN_CENTRE)
		self.text_ctrl_2 = wx.TextCtrl(self, -1, "1000", style=wx.TE_PROCESS_ENTER)
		self.panel_5 = wx.Panel(self, -1)
		self.panel_6 = wx.Panel(self, -1)
		self.button_5 = wx.Button(self, -1, "Aceptar")
		self.panel_12 = wx.Panel(self, -1)
		self.panel_13 = wx.Panel(self, -1)
		self.label_4 = wx.StaticText(self, -1, "Lambda", style=wx.ALIGN_CENTRE)
		self.text_ctrl_4 = wx.TextCtrl(self, -1, "0.442", style=wx.TE_PROCESS_ENTER)
		self.label_5 = wx.StaticText(self, -1, "dx", style=wx.ALIGN_CENTRE)
		self.text_ctrl_5 = wx.TextCtrl(self, -1, "7.5", style=wx.TE_PROCESS_ENTER)
		self.label_6 = wx.StaticText(self, -1, "dy", style=wx.ALIGN_CENTRE)
		self.text_ctrl_6 = wx.TextCtrl(self, -1, "7.5", style=wx.TE_PROCESS_ENTER)
		self.label_7 = wx.StaticText(self, -1, "D", style=wx.ALIGN_CENTRE)
		self.text_ctrl_7 = wx.TextCtrl(self, -1, "30000", style=wx.TE_PROCESS_ENTER)
		self.panel_9 = wx.Panel(self, -1)
		self.radio_box_1 = wx.RadioBox(self, -1, u"Algoritmo de Propagación", choices=["Espectro Angular", u"Convolución", "T. Fresnel"], majorDimension=0, style=wx.RA_SPECIFY_ROWS)
		self.panel_11 = wx.Panel(self, -1)

		self.__set_properties()
		self.__do_layout()

		self.Bind(wx.EVT_BUTTON, self.f_minus, self.button_6)
		self.Bind(wx.EVT_BUTTON, self.f_more, self.button_7)
		self.Bind(wx.EVT_TEXT_ENTER, self.change_interval, self.text_ctrl_1)
		self.Bind(wx.EVT_TEXT_ENTER, self.change_steps, self.text_ctrl_2)
		self.Bind(wx.EVT_BUTTON, self.push_enter, self.button_5)
		self.Bind(wx.EVT_TEXT_ENTER, self.change_lambda, self.text_ctrl_4)
		self.Bind(wx.EVT_TEXT_ENTER, self.change_dx, self.text_ctrl_5)
		self.Bind(wx.EVT_TEXT_ENTER, self.change_dy, self.text_ctrl_6)
		self.Bind(wx.EVT_TEXT_ENTER, self.change_D, self.text_ctrl_7)
		self.Bind(wx.EVT_RADIOBOX, self.algorithm_selection, self.radio_box_1)
		# end wxGlade

	def __set_properties(self):
		# begin wxGlade: MyDialog.__set_properties
		self.SetTitle("dialog_1")
		self.bitmap_1.SetMinSize((640, 480))
		self.panel_1.SetMinSize((670,510))
		self.panel_1.SetScrollRate(2, 2)
		self.window_1.SetMinSize((640, 40))
		self.radio_box_1.SetSelection(0)
		# end wxGlade

	def __do_layout(self):
		# begin wxGlade: MyDialog.__do_layout
		grid_sizer_1 = wx.FlexGridSizer(1, 2, 0, 0)
		grid_sizer_4 = wx.FlexGridSizer(4, 1, 0, 0)
		grid_sizer_8 = wx.FlexGridSizer(5, 2, 0, 0)
		grid_sizer_2 = wx.FlexGridSizer(2, 1, 0, 0)
		grid_sizer_3 = wx.FlexGridSizer(3, 1, 0, 0)
		grid_sizer_6 = wx.FlexGridSizer(1, 2, 0, 0)
		grid_sizer_9 = wx.FlexGridSizer(1, 2, 0, 0)
		grid_sizer_7 = wx.FlexGridSizer(3, 3, 0, 0)
		grid_sizer_5 = wx.FlexGridSizer(1, 6, 0, 0)
		grid_sizer_10 = wx.FlexGridSizer(1, 1, 0, 0)
		grid_sizer_10.Add(self.bitmap_1, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 6)
		self.panel_1.SetSizer(grid_sizer_10)
		grid_sizer_2.Add(self.panel_1, 1, wx.ALL|wx.EXPAND|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 3)
		grid_sizer_5.Add(self.panel_14, 1, wx.EXPAND, 0)
		grid_sizer_5.Add(self.panel_15, 1, wx.EXPAND, 0)
		grid_sizer_5.Add(self.panel_16, 1, wx.EXPAND, 0)
		grid_sizer_5.Add(self.panel_17, 1, wx.EXPAND, 0)
		grid_sizer_5.Add(self.button_6, 0, 0, 0)
		grid_sizer_5.Add(self.button_7, 0, 0, 0)
		grid_sizer_3.Add(grid_sizer_5, 1, wx.EXPAND, 0)
		grid_sizer_3.Add(self.window_1, 1, wx.ALL|wx.EXPAND, 2)
		grid_sizer_7.Add(self.label_1, 0, wx.ALL|wx.EXPAND, 2)
		grid_sizer_7.Add(self.text_ctrl_1, 0, wx.ALL|wx.EXPAND, 2)
		grid_sizer_7.Add(self.label_8, 0, wx.ALL|wx.EXPAND|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 2)
		grid_sizer_7.Add(self.label_2, 0, wx.ALL|wx.EXPAND, 2)
		grid_sizer_7.Add(self.text_ctrl_2, 0, wx.ALL|wx.EXPAND, 2)
		grid_sizer_7.Add(self.panel_5, 1, wx.EXPAND, 0)
		grid_sizer_6.Add(grid_sizer_7, 1, wx.EXPAND, 0)
		grid_sizer_9.Add(self.panel_6, 1, wx.EXPAND, 0)
		grid_sizer_9.Add(self.button_5, 0, 0, 0)
		grid_sizer_6.Add(grid_sizer_9, 1, wx.EXPAND, 0)
		grid_sizer_3.Add(grid_sizer_6, 1, wx.EXPAND, 0)
		grid_sizer_2.Add(grid_sizer_3, 1, wx.EXPAND, 0)
		grid_sizer_1.Add(grid_sizer_2, 1, wx.EXPAND, 0)
		grid_sizer_8.Add(self.panel_12, 1, wx.EXPAND, 0)
		grid_sizer_8.Add(self.panel_13, 1, wx.EXPAND, 0)
		grid_sizer_8.Add(self.label_4, 0, wx.ALL|wx.EXPAND, 2)
		grid_sizer_8.Add(self.text_ctrl_4, 0, wx.ALL|wx.EXPAND, 2)
		grid_sizer_8.Add(self.label_5, 0, wx.ALL|wx.EXPAND, 2)
		grid_sizer_8.Add(self.text_ctrl_5, 0, wx.ALL|wx.EXPAND, 2)
		grid_sizer_8.Add(self.label_6, 0, wx.ALL|wx.EXPAND, 2)
		grid_sizer_8.Add(self.text_ctrl_6, 0, wx.ALL|wx.EXPAND, 2)
		grid_sizer_8.Add(self.label_7, 0, wx.ALL|wx.EXPAND, 2)
		grid_sizer_8.Add(self.text_ctrl_7, 0, wx.ALL|wx.EXPAND, 2)
		grid_sizer_4.Add(grid_sizer_8, 1, wx.EXPAND, 0)
		grid_sizer_4.Add(self.panel_9, 1, wx.EXPAND, 0)
		grid_sizer_4.Add(self.radio_box_1, 0, wx.ALL|wx.EXPAND, 3)
		grid_sizer_4.Add(self.panel_11, 1, wx.EXPAND, 0)
		grid_sizer_1.Add(grid_sizer_4, 1, wx.EXPAND, 0)
		self.SetSizer(grid_sizer_1)
		grid_sizer_1.Fit(self)
		self.Layout()
		# end wxGlade

	def push_enter(self, event): # wxGlade: MyDialog.<event_handler>
		print "Event handler `push_enter' not implemented"
		event.Skip()

	def center(self, event): # wxGlade: MyDialog.<event_handler>
		print "Event handler `center' not implemented"
		event.Skip()

	def change_interval(self, event): # wxGlade: MyDialog.<event_handler>
		print "Event handler `change_interval' not implemented"
		event.Skip()

	def change_steps(self, event): # wxGlade: MyDialog.<event_handler>
		print "Event handler `change_steps' not implemented"
		event.Skip()

	def change_lambda(self, event): # wxGlade: MyDialog.<event_handler>
		print "Event handler `change_lambda' not implemented"
		event.Skip()

	def change_dx(self, event): # wxGlade: MyDialog.<event_handler>
		print "Event handler `change_dx' not implemented"
		event.Skip()

	def change_dy(self, event): # wxGlade: MyDialog.<event_handler>
		print "Event handler `change_dy' not implemented"
		event.Skip()

	def change_D(self, event): # wxGlade: MyDialog.<event_handler>
		print "Event handler `change_D' not implemented"
		event.Skip()

	def f_more(self, event): # wxGlade: MyDialog.<event_handler>
		print "Event handler `f_more' not implemented"
		event.Skip()

	def f_minus(self, event): # wxGlade: MyDialog.<event_handler>
		print "Event handler `f_minus' not implemented"
		event.Skip()

	def algorithm_selection(self, event): # wxGlade: MyDialog.<event_handler>
		print "Event handler `algorithm_selection' not implemented"
		event.Skip()

# end of class MyDialog




#########################
from scipy.misc import fromimage, toimage
from pylab import *
import Image
from scipy import sqrt


def espectroAngular(f,dx,dy,z,Lambda):

	M = f.shape
	[u,v] = mgrid[-M[0]/2:M[0]/2,-M[1]/2:M[1]/2]
	du = 1./(M[0]*dx)
	dv = 1./(M[1]*dy)
	gaux = 1 - (Lambda*u*du)**2 - (Lambda*v*dv)**2
	gaux = where(gaux<=1, gaux, 0)
	k = 2*pi/Lambda
	G = exp( 1.j*z*k*sqrt( gaux ) )
	f1 = ifft2( fft2(f)*fftshift(G) )
	return f1,dx,dy
	
	
	
def pilToImage(pil):
	image = wx.EmptyImage(pil.size[0], pil.size[1])
	image.SetData(pil.convert('RGB').tostring())
	return image

def imageToBitmap(image):
	return image.ConvertToBitmap()

def pilToBitmap(pil):
	return imageToBitmap(pilToImage(pil))
	
### funciones tomadas de http://wiki.wxpython.org/index.cgi/WorkingWithImages


def fits2image(fitsArray, min=-1, max=-1):
	"""Convert ndarray to wx.Image"""
	# Flip image
	print 'Flipping array'
	fitsArray = fitsArray[::-1, :]
	# Clip image
	print 'Clipping array'
	if min == -1: min = fitsArray.min()
	if max == -1: max = fitsArray.max()
	fitsArray = fitsArray.clip(min=min, max=max)
	min = fitsArray.min()
	max = fitsArray.max()
	# Faster Python-like way to copy and scale image into RGB buffer
	print 'Filling RGB buffer'
	byteArray = (255 * (fitsArray - min) / (max - min)).astype('b').repeat(3)
	# Create wx.Image from byte buffer
	print 'Creating image from buffer'
	return wx.ImageFromData(fitsArray.shape[1], fitsArray.shape[0], byteArray.tostring())

### tomada de http://www.skycoyote.com/Python/043007/
	



class Propagate_WIndow(MyDialog):



	def __init__(self, *args, **kwds):

		self.im_ndarray=kwds.pop("im",None)
		
		MyDialog.__init__(self,  *args, **kwds)
		self.SetTitle("Clase Heredera")

		self.factor=1.

		self.xPos_ = 0
		self.yPos_ = 0	

		self.change_shape()
		

		############ set_values_init

		self.lambda_value=float(self.text_ctrl_4.GetValue())
		self.dx_value=float(self.text_ctrl_5.GetValue())
		self.dy_value=float(self.text_ctrl_6.GetValue())
	
		self.set_values_floatcombo()
		self.use_transform = 0
		self.propagate(self.central_value)


		self.Bind(EVT_FLOATCOMBO_THUMBRELEASE, self.slide_release, self.window_1)	
		self.Bind(EVT_FLOATCOMBO_SPINUP, self.spinup, self.window_1)	
		self.Bind(EVT_FLOATCOMBO_SPINDOWN, self.spindown, self.window_1)	
		self.Bind(EVT_FLOATCOMBO_TEXT_ENTER, self.text_enter, self.window_1)
		self.Bind(wx.EVT_CLOSE, self.OnCloseWindow)



	def set_values_floatcombo(self):
		
		central = float(self.text_ctrl_7.GetValue())		
		min = central - float( self.text_ctrl_1.GetValue()) 
		max = central + float( self.text_ctrl_1.GetValue()) 
		step = float(self.text_ctrl_2.GetValue())
	
		self.min_value=int(min)
		self.max_value=int(max)
		self.step_value=step
		self.central_value=central	
		
		self.window_1.SetMin(self.min_value)
		self.window_1.SetMax(self.max_value)
		self.window_1.SetSteps(self.step_value)
		self.window_1.SetValue(self.central_value)




	def OnCloseWindow(self, event):
		out=wx.ID_CANCEL
		self.EndModal(out)

	def put_image(self):		


		### con pil	
		self.image_pil = toimage(self.im_ndarray_view)
		self.image_pil = self.image_pil.resize( (self.newx, self.newy), Image.BICUBIC)#Image.NEAREST) 
		self.image_Bitmap = pilToBitmap(self.image_pil)
		self.bitmap_1.SetBitmap( self.image_Bitmap ) 
#~ 
#~ 
		### solo con wx	
		#~ self.image_wx = fits2image(self.im_ndarray_view)
		#~ self.image_wx.Rescale(self.newx, self.newy)	
		#~ self.image_Bitmap = wx.BitmapFromImage(self.image_wx)
		#~ self.bitmap_1.SetBitmap( self.image_Bitmap )
#~ 


	def propagate(self, z):
	
		self.Z=z
	
		f=self.im_ndarray
		dx=self.dx_value
		dy=self.dy_value
		Lambda=.442		
		
		if self.use_transform == 0:
			self.im,a,a=espectroAngular(f=f, dx=dx, dy=dy, z=z, Lambda=Lambda)

		elif self.use_transform == 1:
			pass

		elif self.use_transform == 2:
			pass

		self.im_ndarray_view = abs(self.im)
		self.put_image()

	def slide_release(self, event):	
		self.dvalue=event.GetValue()
		self.propagate(self.dvalue)
		event.Skip()

	def  text_enter(self, event):	
		self.dvalue=event.GetValue()
		self.propagate(self.dvalue)
		event.Skip()


	def  spinup(self, event):	
		self.dvalue=event.GetValue()
		self.propagate(self.dvalue)
		event.Skip()
		

	def  spindown(self, event):	
		self.dvalue=event.GetValue()
		self.propagate(self.dvalue)
		event.Skip()		

	def push_enter(self, event):	
		out=wx.ID_OK
		self.EndModal(out)
		event.Skip()
	

	
	def f_more(self, event): # wxGlade: MyDialog.<event_handler>

		self.factor = self.factor*sqrt(2)
		self.change_shape()
		
		self.im_ndarray_view=self.im_ndarray_view
		self.put_image()

		###self.flag_more = True
		
		event.Skip()

	def f_minus(self, event): # wxGlade: MyDialog.<event_handler>

		self.factor = self.factor/sqrt(2)
		self.change_shape()
			
		self.im_ndarray_view=self.im_ndarray_view
		self.put_image()

		###self.flag_more = False
		
		event.Skip()
	
	
	def change_shape(self):
		self.newy = int(self.im_ndarray.shape[0]*self.factor)
		self.newx = int(self.im_ndarray.shape[1]*self.factor)
		number=2
		self.xPos_, self.yPos_ = self.panel_1.GetViewStart()
		self.panel_1.SetScrollbars(number, number, int(self.newx/number), int(self.newy/number), self.xPos_, self.yPos_)	
		####self.panel_1.EnableScrolling(1,0)		
	
	
	def change_interval(self, event): # wxGlade: MyDialog.<event_handler>
		self.set_values_floatcombo()
		event.Skip()

	def change_steps(self, event): # wxGlade: MyDialog.<event_handler>
		self.set_values_floatcombo()
		event.Skip()

	def change_lambda(self, event): # wxGlade: MyDialog.<event_handler>
		self.lambda_value = float(self.text_ctrl_4.GetValue())
		self.propagate(self.central_value)
		event.Skip()

	def change_dx(self, event): # wxGlade: MyDialog.<event_handler>
		self.dx_value = float(self.text_ctrl_5.GetValue())
		self.propagate(self.central_value)
		event.Skip()

	def change_dy(self, event): # wxGlade: MyDialog.<event_handler>
		self.dy_value=float(self.text_ctrl_6.GetValue())
		self.propagate(self.central_value)
		event.Skip()

	def change_D(self, event): # wxGlade: MyDialog.<event_handler>
		self.central_value=float(self.text_ctrl_7.GetValue())
		self.propagate(self.central_value)
		self.set_values_floatcombo()
		event.Skip()	
	
	def algorithm_selection(self, event): # wxGlade: MyDialog.<event_handler>
		self.use_transform = self.radio_box_1.GetSelection()
		event.Skip()	
		
		
	
class MyApp(wx.App):
	def OnInit(self):
		wx.InitAllImageHandlers()


		imagen=imread("holo8.bmp")

		#imagen=imread("13agosto_holo.bmp")

		#~ imagen=imread("holo13.bmp")

		propagate_window = Propagate_WIndow(None,-1,"",im=imagen)
		if propagate_window.ShowModal()==wx.ID_OK:
			print propagate_window.Z

		self.SetTopWindow(propagate_window)
		propagate_window.Destroy()
		return 1
	
	
if __name__ == "__main__":
	app = MyApp(0)
	app.MainLoop()
